<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.atlisheng</groupId>
    <artifactId>cloud-h-demo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>01-provider-payment</module>
        <module>02-consumer-order</module>
        <module>03-common</module>
        <module>04-eureka-server</module>
        <module>05-eureka-sever7002</module>
        <module>06-provider-payment</module>
        <module>07-provider-payment</module>
        <module>08-consumer-order</module>
        <module>09-provider-payment</module>
        <module>10-consumer-order</module>
        <module>11-consumer-order</module>
        <module>12-payment-payment</module>
        <module>13-consumer-order</module>
        <module>14-provider-hystrix-dashboard</module>
        <module>15-gateway</module>
        <module>16-config</module>
        <module>17-config-client</module>
        <module>18-config-client</module>
        <module>19-stream-provider</module>
        <module>20-stream-consumer</module>
        <module>21-stream-consumer</module>
        <module>22-nacos-provider-payment</module>
        <module>23-nacos-provider-payment</module>
        <module>24-nacos-consumer-order</module>
        <module>25-nacos-config-client</module>
        <module>26-sentinel</module>
        <module>27-sentinel-provider-payment</module>
        <module>28-sentinel-provider-payment</module>
        <module>29-sentinel-consumer-order</module>
        <module>30-seata-consumer-order</module>
        <module>31-seata-provider-storage</module>
        <module>32-seata-provider-account</module>
    </modules>
    <packaging>pom</packaging>

    <!--统一管理jar包的版本-->
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--老四件套-->
        <junit.version>4.12</junit.version>
        <log4j.version>1.2.17</log4j.version>
        <lombok.version>1.16.18</lombok.version>
        <mysql.version>8.0.27</mysql.version>
        <!--mybatis和德鲁伊的版本号-->
        <druid.version>1.1.16</druid.version>
        <mybatis.spring.boot.version>1.3.0</mybatis.spring.boot.version>
        <project.version>1.0-SNAPSHOT</project.version>
    </properties>

    <!--子模块继承后提供：锁定版本+子模块不用写groupId和version-->
    <dependencyManagement>
        <!--dependencyManagement和dependencies的区别
            dependencyManagement：通常会在一个组织或者项目的最顶层的父POM中看到dependencyManagement，
                    能让所有在子项目中引用一个依赖而不用显示的列出版本号，Maven会沿着父子层次向上直到找到拥有dependencyManagement元素的项目，自动使用
                    dependencyManagement元素中指定的版本号，好处是所有的子项目都是采用父容器规定的版本号，无需每个子版本都进行声明，子版本需要另外版本
                    可以在子项目中单独声明
                dependencyManagement只是声明依赖，并不会引入，子项目需要显示声明需要用到的依赖
                由于本机mysql的版本是mysql8.0.27，这里更改了mysql驱动的版本
            dependencies是真正的引入依赖，通常在子模块中使用
        -->
        <dependencies>
            <!--springboot 2.2.2-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.2.2.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud Hoxton.SR1-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Hoxton.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud alibaba 2.1.0.RELEASE-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>2.1.0.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.boot.version}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <optional>true</optional>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!--plugin提示fork不可用,加一个和springboot一样的版本号，但是2.2.2RELEASE提示不存在，这里用最近的2.2.1-->
                <version>2.2.1.RELEASE</version>
                <configuration>
                    <fork>true</fork>
                    <addResources>true</addResources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>